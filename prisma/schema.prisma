generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  login          String        @unique
  email          String        @unique
  passwordHash   String?
  avatarUrl      String
  desc           String
  followsCount   Int
  followersCount Int
  Post           Post[]
  createdAt      DateTime      @default(now())
  PostLike       PostLike[]
  View           View[]
  Comment        Comment[]
  CommentLike    CommentLike[]
  followedBy     User[]        @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs  String[]      @db.ObjectId
  following      User[]        @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs   String[]      @db.ObjectId
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  body        Json
  files       PostFile[]
  programs    String[]
  tags        String[]
  likes       PostLike[]
  views       View[]
  viewsCount  Int
  comments    Comment[]
  createdAt   DateTime      @default(now())
  CommentLike CommentLike[]
}

model PostLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model View {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  postId    String        @db.ObjectId
  userId    String        @db.ObjectId
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id])
  text      String
  files     CommentFile[]
  createdAt DateTime      @default(now())
  likes     CommentLike[]
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  commentId String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model PostFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  fileName  String
  fileUrl   String
  fileType  String
  createdAt DateTime @default(now())
}

model CommentFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName  String
  fileUrl   String
  fileType  String
  createdAt DateTime @default(now())
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId
}
